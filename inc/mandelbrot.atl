keys; // First we handle the keyboard, leaving the stack alone.
// See https://wiki.libsdl.org/SDL2/SDL_Scancode.
0;dup;[41 42 0];s;first;ifn'go';
quit;  // Quit if escape pressed.
l'go';
0;dup;[30 31 0];s;first;ifn'go2';
load'main.atl';
l'go2';
0;dup;[31 32 0];s;first;ifn'go3';
load'inc\fire.atl';
l'go3';
0;dup;[32 33 0];s;first;ifn'go4';
load'inc\mandelbrot.atl';
l'go4';
pop; // pop keys

input; // deal with input, a 6 value rank 1 tensor; three axes then three buttons.
0;dup;[3 4 0];s;first;2;-;if'nodblclick';
load'main.atl';l'nodblclick'; // Load next demo on double click.

[1.2];1;dup;[2 3 0];s;^;get'zoom';*;set'zoom' 1; // set zoom unconditionally
0;dup;[3 4 0];s;first;ifn'nomouse'; // if mouse button 1 not held jump to nomouse
0;dup;[0 2 0];s;windowSize;[1 2 0];s;0;dup;0;cat;/;get'zoom';[4];/;0;dup;0;cat;/;get'offs';+;set'offs' 2;
l'nomouse';
0;dup;[4 5 0];s;first;ifn'nomouse2'; // if mouse button 2 not held jump to nomouse2
0;dup;[0 2 0];s;windowSize;[1 2 0];s;0;dup;0;cat;/;get'zoom';[4];/;0;dup;0;cat;/;
get'perturb';+;set'perturb' 2;
l'nomouse2';
0;dup;[5 6 0];s;first;ifn'nomouse3'; // if mouse button 3 not held jump to nomouse3
0;dup;[1 2 0];s;[400];/;get'exp';+;set'exp' 1;
l'nomouse3';
pop;


size;if'started';
1;1;1;
[1];set'zoom' 1;
[0.5 0];set'offs' 2;
[0 0];set'perturb' 2;
[2];set'exp' 1;
l'started';
pop;pop;pop;



windowSize;set'wsize' 2;
get'wsize';
c''
vec4 tf = vec4( t )\
ret[ 0 ] = ( ( tf.x + 0.5 ) * 4.0 / wsize.x - 2.0 ) * wsize.x / wsize.y / zoom - offs.x\
ret[ 1 ] = ( ( tf.y + 0.5 ) * 4.0 / wsize.y - 2.0 ) / zoom + offs.y\
'0 2;
get'wsize';c''ret[0]=perturb.x\ret[1]=perturb.y\' 0 2;
1;if'skip'; 

l'mand';
3;dup;3;dup;
get'wsize';
c'
vec2 mand( vec2 x, vec2 c, float e ){
  float angle = atan( x.y, x.x ) * e\
  float mag = pow( length( x ), e )\
  return vec2( cos( angle ) * mag + c.x, sin( angle ) * mag + c.y )\
}
float mand2( vec2 x, vec2 c ){
  float count = 0.0\
  vec2 nx = x\
  for( int i = 0\ i < 32\ ++i ){
    nx = mand( nx, c, exp )\
    if( length( nx ) > 4.0 )
      break\
    ++count\
  }
  return count\
}
'
vec2 x = vec2( c( ivec4( t.xy, 0, 0 ) ), d( ivec4( t.xy, 0, 0 ) ) )\
vec2 c = vec2( a( ivec4( t.xy, 0, 0 ) ), b( ivec4( t.xy, 0, 0 ) ) )\
float r = mand2( x, c )\
ret[ 0 ] = r\' 4 1;
return;


l'skip';
mand;
get'wsize';[3];0;cat;c''
ret[0]= a( ivec4( t.xy, 0.0, 0.0 ) ) / 31.0\
' 1 1;
