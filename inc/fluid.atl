windowSize;set'wsize' 2;
timeDelta;e;set'td' 1;
get'wsize';0;dup;first;1;dup;last;/;0.5;^;e;set'aspect' 1;pop; // set aspect ratio

include'inc\stdlib.atl';

'main.atl';
include'inc\nav.atl';


get'keyPresses';[40 41 0];s;first;get'gamepadPresses';[16 17 0];s;first;+;ifn'toggleRunning';
[1];get'running';-;set'running' 1;
l'toggleRunning';
get'keyPresses';[13 14 0];s;first;get'gamepadPresses';[17 18 0];s;first;+;ifn'toggleJet';
[1];get'jet';-;set'jet' 1;
l'toggleJet';



size;if'started'; // init code goes here
[1];set'running' 1;
[1];set'jet' 1;
[0];set'jangle' 1;
[20.0];set'jetStrength' 1;
[2.0];set'jetSpinRate';
[20.0];set'accumDiv' 1;
[5.0];set'jacobiCount';
[1.0];set'timeScale' 1;
[128];set'tankDim' 1;get'tankDim';first;3;rep;set'tankSize'; // Set constants
6;get'tankSize';[3];0;cat;
c''''
if( t.w == 0 )
  ret[ 0 ] = 0.0\ //float( t.x ) / 64.0\
else
  ret[ 0 ] = 0.0\
' 0 1 0; // X y z velocity field
6;get'tankSize';c''''ret[ 0 ] = 0.0\' 0 1 0; // Pressure

nav3d;
[0.5 0.5 1.5];set'origin' 3;


1; // dummy value to pop off in place of display tensor.
l'started'; // init code complete
get'td';get'jetSpinRate';*;get'jangle';+;set'jangle' 1;
nav3d;
pop; // Pop the last display tensor off the stack.


// The stack here, from the top(a) to bottom(d) is: pressure, velocity

get'running';first;ifn'skipUpdate';

///////////////////////////////////////////////////////////////
//  Main driver: here we calulate velocity and pressure.

1;bury;
// The stack here, from the top(a) to bottom(d) is: velocity, pressure


get'jet';first;ifn'skipJet';
6;get'tankSize';[3];0;cat;
c''''
  vec3 pos = vec3(t.x, t.y, t.z)\
  vec3 jetCenter = vec3(tankDim * 0.5, tankDim * 0.5, tankDim * 0.5)\
  float jetRadius = tankDim * 0.1\
  float weight = 1.0 - smoothstep(jetRadius * 0.8, jetRadius, length(pos - jetCenter))\
  float injectedVel = jetStrength * weight\
  if( t.w == 1 )
    ret[0] = a(t) + sin(jangle) * injectedVel\
  else if( t.w == 2 )
    ret[0] = a(t) + cos(jangle) * injectedVel\
  else
    ret[0] = a(t)\
' 1 1 0;
l'skipJet';


6;get'tankSize';[3];0;cat;
c'''
vec3 trilinearSample(vec3 coord) {
    // Get integer (base) and fractional parts.
    ivec4 base = ivec4(floor(coord),0)\
    vec3 f = fract(coord)\

    // Fetch the eight surrounding voxel values:
    vec3 v000 = vec3( a( base + ivec4(0,0,0,0)), a( base + ivec4(0,0,0,1)), a( base + ivec4(0,0,0,2)) )\
    vec3 v100 = vec3( a( base + ivec4(1,0,0,0)), a( base + ivec4(1,0,0,1)), a( base + ivec4(1,0,0,2)) )\
    vec3 v010 = vec3( a( base + ivec4(0,1,0,0)), a( base + ivec4(0,1,0,1)), a( base + ivec4(0,1,0,2)) )\
    vec3 v110 = vec3( a( base + ivec4(1,1,0,0)), a( base + ivec4(1,1,0,1)), a( base + ivec4(1,1,0,2)) )\
    vec3 v001 = vec3( a( base + ivec4(0,0,1,0)), a( base + ivec4(0,0,1,1)), a( base + ivec4(0,0,1,2)) )\
    vec3 v101 = vec3( a( base + ivec4(1,0,1,0)), a( base + ivec4(1,0,1,1)), a( base + ivec4(1,0,1,2)) )\
    vec3 v011 = vec3( a( base + ivec4(0,1,1,0)), a( base + ivec4(0,1,1,1)), a( base + ivec4(0,1,1,2)) )\
    vec3 v111 = vec3( a( base + ivec4(1,1,1,0)), a( base + ivec4(1,1,1,1)), a( base + ivec4(1,1,1,2)) )\

    // Interpolate along x:
    vec3 v00 = mix(v000, v100, f.x)\
    vec3 v10 = mix(v010, v110, f.x)\
    vec3 v01 = mix(v001, v101, f.x)\
    vec3 v11 = mix(v011, v111, f.x)\

    // Interpolate along y:
    vec3 v0 = mix(v00, v10, f.y)\
    vec3 v1 = mix(v01, v11, f.y)\

    // Interpolate along z and return final value:
    return mix(v0, v1, f.z)\
}
'
vec3 vel = vec3( a(t+ivec4(0,0,0,0)), a(t+ivec4(0,0,0,1)), a(t+ivec4(0,0,0,2)) )\
vec3 pos = vec3( t.x, t.y, t.z ) - td * timeScale * vel\
  // Clamp to valid indices
pos = clamp( pos, vec3( 1.0 ), vec3( tankDim - 2.0 ) )\
vec3 advVel = trilinearSample( pos )\

if( t.w == 0 )
  ret[ 0 ] = advVel.x\
else if( t.w == 1 )
  ret[ 0 ] = advVel.y\
else
  ret[ 0 ] = advVel.z\
' 1 1 0;



1;bury;1;dup;
// The stack here, from the top(a) to bottom(d) is: newVelocity, pressure, newVelocity


6;get'tankSize';
c''''
float div = (
         ( a(t + ivec4(1,0,0,0)) - a(t + ivec4(-1,0,0,0)) ) +
         ( a(t + ivec4(0,1,0,1)) - a(t + ivec4(0,-1,0,1)) ) +
         ( a(t + ivec4(0,0,1,2)) - a(t + ivec4(0,0,-1,2)) )
         ) / 2.0\
if( t.x == 0 || t.x == int( tankDim )-1 ||
    t.y == 0 || t.y == int( tankDim )-1 ||
    t.z == 0 || t.z == int( tankDim )-1 ) 
  ret[0] = 1.0\
else
  ret[ 0 ] = div\
' 1 1 0;


1;bury;
// The stack here, from the top(a) to bottom(d) is: pressure, divergence, newVelocity


get'jacobiCount';first;set'jacobiCounti';
l'jacobi';
1;dup;
6;get'tankSize';
c''''
if( t.x == 0 || t.x == int( tankDim )-1 ||
    t.y == 0 || t.y == int( tankDim )-1 ||
    t.z == 0 || t.z == int( tankDim )-1 ) {
    ret[0] = 0.0\
} else {
    // Do the standard Jacobi update.
    // Fetch neighboring pressure values from the current pressure field (tensor b)
float pL = (t.x == 0) ? b( t ) : b( t + ivec4( 1,  0,  0, 0 ) )\
float pR = (t.x == int(tankDim)-1) ? b( t ) : b( t + ivec4(-1,  0,  0, 0 ) )\
float pU = (t.y == int(tankDim)-1) ? b( t ) : b( t + ivec4( 0,  1,  0, 0 ) )\
float pD = (t.y == 0) ? b( t ) : b( t + ivec4( 0, -1,  0, 0 ) )\
float pF = (t.z == int(tankDim)-1) ? b( t ) : b( t + ivec4( 0,  0,  1, 0 ) )\
float pB = (t.z == 0) ? b( t ) : b( t + ivec4( 0,  0, -1, 0 ) )\
    \
    // Get the divergence at this cell from tensor a
    float div = a( t )\
    \
    // Jacobi update: new pressure equals the average of neighbors minus the divergence term
    float newP = ( pL + pR + pU + pD + pF + pB - div ) / 6.0\
    \
    // Write the new pressure value to the output
    ret[ 0 ] = newP\
}
' 2 1 0;
get'jacobiCounti';1;-;0;dup;set'jacobiCounti';if'jacobi';


// The stack here, from the top(a) to bottom(d) is: pressure, divergence, newVelocity
2;bury;pop;1;dup;1;bury;
// The stack here, from the top(a) to bottom(d) is: newVelocity, pressure, pressure

6;get'tankSize';[3];0;cat;
c''''
    // Compute central differences for the pressure gradient.
    // Here, we assume unit grid spacing.
    float pL = b( ivec4( t.xyz, 0 ) + ivec4( 1,  0,  0, 0 ) )\
    float pR = b( ivec4( t.xyz, 0 ) + ivec4(-1,  0,  0, 0 ) )\
    float pU = b( ivec4( t.xyz, 0 ) + ivec4( 0,  1,  0, 0 ) )\
    float pD = b( ivec4( t.xyz, 0 ) + ivec4( 0, -1,  0, 0 ) )\
    float pF = b( ivec4( t.xyz, 0 ) + ivec4( 0,  0,  1, 0 ) )\
    float pB = b( ivec4( t.xyz, 0 ) + ivec4( 0,  0, -1, 0 ) )\
    
    // Compute gradient using central differences. Multiplying by 0.5 gives (pR-pL)/2, etc.
    vec3 gradP = vec3( (pL - pR)*0.5, (pU - pD)*0.5, (pF - pB)*0.5 )\
if( t.x <= 1 || t.x >= int( tankDim )-2 ||
    t.y <= 1 || t.y >= int( tankDim )-2 ||
    t.z <= 1 || t.z >= int( tankDim )-2 ) {
    gradP *= 0.0\
}
// Fetch the current velocity from tensor b (channels: 0 = x, 1 = y, 2 = z).\
    vec3 vel = vec3( a( ivec4( t.xyz, 0 ) + ivec4(0,0,0,0) ), a( ivec4( t.xyz, 0 ) + ivec4(0,0,0,1) ), a( ivec4( t.xyz, 0 ) + ivec4(0,0,0,2) ) )\
    // Subtract the pressure gradient from the velocity to get the divergence-free (projected) velocity.
    vec3 projVel = vel - gradP\
    // Write the corrected velocity back to the appropriate channel.\
    if( t.w == 0 )
        ret[0] = projVel.x\
    else if( t.w == 1 )
        ret[0] = projVel.y\
    else
        ret[0] = projVel.z\
' 2 1 0;


// The stack here, from the top(a) to bottom(d) is: newVelocity, pressure
1;bury;
// The stack here, from the top(a) to bottom(d) is: pressure, newVelocity


l'skipUpdate';

// Calculate display.
1;dup;
6;get'wsize';[4];0;cat; 
c''''
// Compute the initial ray in view space
vec3 ray = normalize(
    vec3(
      ( tf.xy / wsize * 2.0 - 1.0 ) * vec2(aspect, 1.0/aspect), 
      -1.0
    )
)\

// Rotate it by worldRotation
vec3 rayDir = ( worldRotation * vec4(ray, 1.0) ).xyz\
//vec3 accum = vec3( 0.0 )\
float accum = 0.0\
int maxSteps = 256\
float stepSize = 0.01\
vec3 pos = origin\
for( int i = 0\ i < maxSteps\ i++ ){\
    pos += rayDir * stepSize\
    if( any( lessThan( pos, vec3( 0.0 ) ) ) || any( greaterThan( pos, vec3( 1.0 ) ) ) ){ continue\ }
    ivec3 sampIndex = ivec3( int( floor( pos.x * tankDim ) ), int( floor( pos.y * tankDim ) ), int( floor( pos.z * tankDim ) ) )\
//    vec3 dens = vec3( a( ivec4( sampIndex, 0 ) ), a( ivec4( sampIndex, 1 ) ), a( ivec4( sampIndex, 2 ) ) )\
      float dens = abs( a( ivec4( sampIndex, 0 ) ) )\
      accum += dens * stepSize\
}\
ret[ 0 ] = vec4( accum / accumDiv )\
' 1 1 4;


// The stack here, from the top(a) to bottom(d) is: display, pressure, newVelocity



//////////////////////////////////////////////////////////////////
// Help and framerate

get'keys';[58 59 0];s;first;ifn'skipf1';
'Click and drag: rotate view                     ';e;
'Right click: fly forward                        ';e;0;cat;
'w/s/a/d/c/shift/ctrl/space: fly around          ';e;0;cat;
'Mouse wheel: change fly speed                   ';e;0;cat;
'J key: toggle jet                               ';e;0;cat;
'Enter key: toggle simulation                    ';e;0;cat;
textToTexture;blitText;
l'skipf1';
get'keys';[59 60 0];s;first;get'gamepad';[13 14 0];s;first;+;ifn'skipf2';
1;timeDelta;/;toString;e;
textToTexture;blitText;
l'skipf2';
get'keyPresses';[60 61 0];s;first;ifn'skipf3';rtd;l'skipf3';