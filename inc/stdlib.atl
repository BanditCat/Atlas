get'__stdlibInited';if'__stdlibInitDone';
1;set'__stdlibInited';
0;512;rep;set'__oldKeys';
0;21;rep;set'__oldGamepad';
0;21;rep;set'gamepad';
0;21;rep;set'gamepadPresses';
0;21;rep;set'gamepadReleases';
l'__stdlibInitDone'; // Init code

keys;set'keys';input;set'input';
gamepad;0;dup;shape;first;ifn'__nogamepad';
first;
1;if'__gamepadDone';
l'__nogamepad';
pop;0;21;rep;
l'__gamepadDone';
set'gamepad'; // Set input variables, it's important to do this just once per frame for smoothest performance

1;512;rep;
get'__oldKeys';-;
get'keys';*;set'keyPresses';
1;512;rep;
get'keys';-;
get'__oldKeys';*;set'keyReleases';
get'keys';set'__oldKeys';  // Calculate releases and presses

1;21;rep;
get'__oldGamepad';-;
get'gamepad';*;set'gamepadPresses';
1;21;rep;
get'gamepad';-;
get'__oldGamepad';*;set'gamepadReleases';
get'gamepad';set'__oldGamepad';





1;if'__stdlibend'; // Jump past functions


////////////////////////////////////////////////////////////////////////////////
// nav2d
// This function takes 0 arguments but sets offs (a 2 vec), zoom (a 1 vec),
// rightClickParam (a 2 vec) and middleClickParam(a 2 vec) according to mouse
// state.


l'nav2d';
get'__nav2dInited';if'__nav2dInitDone';
[1];set'zoom' 1;
[0 0];set'rightClickParam' 2;
[0 0];set'offs' 2;
[0 0];set'middleClickParam' 2;
1;set'__nav2dInited';
l'__nav2dInitDone';

get'gamepad';[2 4 0];s;timeDelta;2;rep;*;get'zoom';0;dup;0;cat;/;get'offs';+;set'offs' 2;
get'gamepad';[4 6 0];s;timeDelta;2;rep;*;get'zoom';0;dup;0;cat;/;get'rightClickParam';+;set'rightClickParam' 2;
get'zoom';get'gamepad';[0 1 0];s;first;timeDelta;*;1;+;e;*;set'zoom' 1;
get'zoom';get'gamepad';[1 2 0];s;first;timeDelta;*;1;+;e;/;set'zoom' 1;
get'gamepad';[15 16 0];s;first;ifn'__nogpmc';
get'middleClickParam';[0];timeDelta;e;0;cat;-;set'middleClickParam' 2;
l'__nogpmc';
get'gamepad';[18 19 0];s;first;ifn'__nogpmc2';
get'middleClickParam';[0];timeDelta;e;0;cat;+;set'middleClickParam' 2;
l'__nogpmc2';
get'gamepad';[16 17 0];s;first;ifn'__nogpmc3';
get'middleClickParam';timeDelta;e;[0];0;cat;+;set'middleClickParam' 2;
l'__nogpmc3';
get'gamepad';[17 18 0];s;first;ifn'__nogpmc4';
get'middleClickParam';timeDelta;e;[0];0;cat;-;set'middleClickParam' 2;
l'__nogpmc4';

get'input'; // deal with input, a 6 value rank 1 tensor; three axes (x y wheel) then three buttons (left right middle).
[1.2];1;dup;[2 3 0];s;^;get'zoom';*;set'zoom' 1; // set zoom unconditionally
0;dup;[3 4 0];s;first;ifn'__nomouse'; // if mouse button 1 not held jump to nomouse
0;dup;[0 2 0];s;windowSize;[1 2 0];s;0;dup;0;cat;/;get'zoom';0;dup;0;cat;/;
get'offs';+;set'offs' 2;
l'__nomouse';

0;dup;[4 5 0];s;first;ifn'__nomouse2'; // if mouse button 2 not held jump to nomouse2
0;dup;[0 2 0];s;windowSize;[1 2 0];s;0;dup;0;cat;/;get'zoom';0;dup;0;cat;/;
get'rightClickParam';+;set'rightClickParam' 2;
l'__nomouse2';
0;dup;[5 6 0];s;first;ifn'__nomouse3'; // if mouse button 3 not held jump to nomouse3
0;dup;[0 2 0];s;[400 400];/;get'middleClickParam';+;set'middleClickParam' 2;
l'__nomouse3';
pop;
return;




////////////////////////////////////////////////////////////////////////////////
// nav3d
// This function takes 0 arguments but sets origin (a 3 vec) and worldRotation
// (a 4x4 matrix) according to inputs.

l'nav3d';
get'__nav3dInited';if'__nav3dInitDone';
[0 0 0];set'__velocity';
[0 0];set'__rot';
1;set'speed';
[0 0 0];set'origin' 3;
[0 0];set'3dnavParam';
0;[0 1 0];rot;set'worldRotation' 16;
0;[0 1 0];rot;set'worldUnrotation' 16;
1;set'__nav3dInited';
l'__nav3dInitDone';

0.90;get'input';[2 3 0];s;[-1];*;first;^;get'speed';*;set'speed';

get'gamepad';[4 6 0];s;timeDelta;2;rep;*;[800 800];*;get'__rot';+;set'__rot';

get'input';[3 4 0];s;first;ifn'mouse1skip'; // rotate if mouse 1
get'input';[0 2 0];s;get'__rot';+;set'__rot';
l'mouse1skip';

get'__rot';first;-300;/;[0 1 0];rot; // rot about x
get'__rot';last;-300;/;[1 0 0];rot;m; // rot about y
set'worldRotation' 16;
get'__rot';last;300;/;[1 0 0];rot; // rot about y
get'__rot';first;300;/;[0 1 0];rot;m; // rot about x
set'worldUnrotation' 16;


[0 0 0];set'__accel';
get'keys';[26 27 0];s;first;get'input';[4 5 0];s;first;+;ifn'wkeyskip';
[0 0 -1];
get'__accel';+;set'__accel';
l'wkeyskip';
get'keys';[22 23 0];s;first;ifn'skeyskip';
[0 0 1];
get'__accel';+;set'__accel';
l'skeyskip';
get'keys';[4 5 0];s;first;ifn'akeyskip';
[-1 0 0];
get'__accel';+;set'__accel';
l'akeyskip';
get'keys';[7 8 0];s;first;ifn'dkeyskip';
[1 0 0];
get'__accel';+;set'__accel';
l'dkeyskip';
get'keys';[44 45 0];s;get'keys';[225 226 0];s;+;first;ifn'spkeyskip';
[0 1 0];
get'__accel';+;set'__accel';
l'spkeyskip';
get'keys';[224 225 0];s;get'keys';[6 7 0];s;+;first;ifn'ctkeyskip';
[0 -1 0];
get'__accel';+;set'__accel';
l'ctkeyskip';

get'worldRotation';get'__accel';timeDelta;165;*;3;rep;*;[1];0;cat;m;unext;[0 3 0];s;set'__accel';
get'__velocity';get'__accel';get'speed';3;rep;*;+;set'__velocity';
get'__velocity';[0.95 0.95 0.95];timeDelta;165;*;3;rep;^;*;set'__velocity';

get'origin';get'__velocity';timeDelta;40;/;3;rep;*;+;set'origin' 3;


[0 0 0];set'__joymove';
get'gamepad';[0 1 0];s;first;3;rep;[0 0 -1];*;get'__joymove';+;set'__joymove';
get'gamepad';[1 2 0];s;first;3;rep;[0 0 1];*;get'__joymove';+;set'__joymove';
get'gamepad';[2 3 0];s;first;3;rep;[1 0 0];*;get'__joymove';+;set'__joymove';
get'gamepad';[3 4 0];s;first;3;rep;[0 -1 0];*;get'__joymove';+;set'__joymove';

get'gamepad';[9 10 0];s;first;ifn'__nogpup';
[0];timeDelta;-300;*;e;0;cat;get'3dnavParam';+;set'3dnavParam';
l'__nogpup';
get'gamepad';[11 12 0];s;first;ifn'__nogpdown';
[0];timeDelta;300;*;e;0;cat;get'3dnavParam';+;set'3dnavParam';
l'__nogpdown';
get'gamepad';[10 11 0];s;first;ifn'__nogpright';
timeDelta;300;*;e;[0];0;cat;get'3dnavParam';+;set'3dnavParam';
l'__nogpright';
get'gamepad';[12 13 0];s;first;ifn'__nogpleft';
timeDelta;-300;*;e;[0];0;cat;get'3dnavParam';+;set'3dnavParam';
l'__nogpleft';
get'gamepad';[18 19 0];s;first;ifn'__nogpbty';
timeDelta;10;*;get'speed';+;set'speed';
l'__nogpbty';
get'gamepad';[15 16 0];s;first;ifn'__nogpbta';
timeDelta;-10;*;get'speed';+;set'speed';
get'speed';0;dup;0.1;-;if'__speedPositive';pop;0.1;l'__speedPositive';set'speed';
l'__nogpbta';

get'worldRotation';get'__joymove';[1];0;cat;m;unext;[0 3 0];s;set'__joymove';
get'__joymove';timeDelta;get'speed';*;0.3;*;3;rep;*;get'origin';+;set'origin' 3;

return;




////////////////////////////////////////////////////////////////////////////////
// textToTexure
// This function takes 1 argument, a string character matrix formed like so:
// 'Hello';e;
// 'world';e;0;cat;
// 'more ';e;0;cat;
// 'text ';e;0;cat;
// The function returns 1 tensor: the text texture itself.

l'textToTexture';
[4];set'_tzoom' 1;
[0 1];t;1;r; // Adjust char matrix
img'inc\font.bmp'; // load font
6;2;dup;shape;[6 8];*;[1 1];+;get'_tzoom';0;dup;0;cat;*;[4];0;cat;
c''''
float x = ( tf.x - _tzoom ) / _tzoom\
float y = tf.y / _tzoom\
ret[0] = vec4( ( mod( floor( x ), 6.0 ) != 5.0 ?
          a( ivec4( mod( floor( x ), 6.0 ),
          mod( y, 8.0 ) + 1328.0 - 8.0 * b( ivec4( floor( x / 6.0 ), floor( y / 8.0 ), 0.0, 0.0 ) )
	  ,1.0, 0.0 ) ) : 1.0 ) )\
' 2 1 4;texture;
return;



////////////////////////////////////////////////////////////////////////////////
// blitText
// This function takes two tensors, a text texture to blit, and a display tensor
// to blit it onto.

l'blitText';
[10 10];set'_toffset' 2;
6;1;dup;shape;set'_tsize' 3;2;dup;shape;
c''''
if( tf.x > _toffset.x && tf.y > _toffset.y && tf.x < _tsize.x / 2. + _toffset.x && tf.y < _tsize.y / 2. + _toffset.y )
  ret[0] = af( ( tf - _toffset ) * 2. )\
else
  ret[0] = bf( tf )\
' 2 1 4;
return;




////////////////////////////////////////////////////////////////////////////////
// perlin
// This function takes 4 arguments, gradient grid size, texture size, amplitude,
// and random seed.  The return value is 1 tensor: a perlin noise tensor.


l'perlin';  
set'_time' 1;
set'_amp' 1;
2;rep;set'_texsize' 2;

2;rep;0;dup;set'_gradsize' 2;pop;6;get'_gradsize';[2];0;cat;
c'''  // Push the gradients.
float hash( vec2 p, float time ){
    float h = dot( p, vec2( 127.1, 311.7 ) ) / 1000.0 + fract( time * 1.2123438709 )\
    return fract( sin( h ) * 43758.5453123 )\
}
'
ret[0]=t.z == 0 ? sin( hash( vec2( t.xy ), _time ) * 2.0 * 3.1415928 ) :
                  cos( hash( vec2( t.xy ), _time ) * 2.0 * 3.1415928 )\
' 0 1 0;

6;get'_texsize';
c'''
float fade( float x ){
    return x*x*x*(x*(x*6.0 - 15.0)+10.0)\
}
float lerp( float a, float b, float t ){
    return a + t*(b - a)\
}
'
vec2 c1 = vec2( t.xy ) * _gradsize / _texsize\
vec2 fract = fract( c1 )\
ivec2 ic1 = ivec2( c1 )\
ivec2 ic2 = ic1 + ivec2( 1, 0 )\
ivec2 ic3 = ic1 + ivec2( 0, 1 )\
ivec2 ic4 = ic1 + ivec2( 1, 1 )\
c1 = vec2( a( ivec4( ic1, 0, 0 ) ), a( ivec4( ic1, 1, 0 ) ) )\
vec2 c2 = vec2( a( ivec4( ic2, 0, 0 ) ), a( ivec4( ic2, 1, 0 ) ) )\
vec2 c3 = vec2( a( ivec4( ic3, 0, 0 ) ), a( ivec4( ic3, 1, 0 ) ) )\
vec2 c4 = vec2( a( ivec4( ic4, 0, 0 ) ), a( ivec4( ic4, 1, 0 ) ) )\
float fc1 = dot( c1, fract - vec2( 0, 0 ) )\
float fc2 = dot( c2, fract - vec2( 1, 0 ) )\
float fc3 = dot( c3, fract - vec2( 0, 1 ) )\
float fc4 = dot( c4, fract - vec2( 1, 1 ) )\
float u  = fade( fract.x )\
float v  = fade( fract.y )\
float v1 = lerp( fc1, fc2, u )\
float v2 = lerp( fc3, fc4, u )\
float v3 = lerp( v1, v2, v )\
ret[0]=_amp*(v3 * 0.5 + 0.5)\
' 1 1 0;
return;




////////////////////////////////////////////////////////////////////////////////
// fractalNoise
// This function takes 2 arguments, initial grid size, and texture size and
// returns a tensor with multiple combined octaves of perlin noise.

l'fractalNoise';
set'__fngradsize';
set'__fntexsize';
[0.5];set'__fnamp';
[1];set'__fnseed';

get'__fngradsize';get'__fntexsize';get'__fnamp';get'__fnseed';perlin;

l'__fnloop';
get'__fngradsize';2;*;set'__fngradsize';
get'__fnamp';[0.5];*;set'__fnamp';
get'__fnseed';[1.2];+;set'__fnseed';
get'__fngradsize';get'__fntexsize';get'__fnamp';get'__fnseed';perlin;
6;get'__fntexsize';2;rep;c''''ret[0]=a(t)+b(t)\' 2 1 0;
get'__fntexsize';get'__fngradsize';/;4;-;if'__fnloop';
return;



l'__stdlibend';