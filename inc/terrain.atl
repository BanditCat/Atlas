keys;set'keys';input;set'input'; // Set input variables

'main.atl';
include'inc\nav.atl';




size;if'started'; // init code goes here
img'inc\terrain.bmp';0;dup;shape;[1 2 0];s;set'ttexsize' 1;
4096;0;dup;set'texsize';4;fractalNoise;
get'texsize';[4];0;cat;c''float r=a( ivec4( tf.xy, 0, 0 ) )\ret[0]=vec4( r, r, r, r )\' 1 1 4;
[0.5 -0.5 -0.5];set'origin' 3;
0;[0 1 0];rot;set'worldRotation' 16;
[150 400];set'lrot' 2;
get'lrot';last;-300;/;[1 0 0];rot; // rot about x
get'lrot';first;-300;/;[0 1 0];rot;m; // rot about y
set'lightRotation' 16;

1; // dummy value to pop off in place of display tensor.


l'started'; // init code complete
pop; // Pop the last display tensor off the stack.

get'input';[3 4 0];s;first;ifn'mouse1skip'; // rotate if mouse 1
get'input';[0 2 0];s;get'rot';+;set'rot' 2;
get'rot';last;-300;/;[1 0 0];rot; // rot about x
get'rot';first;-300;/;[0 1 0];rot;m; // rot about y
set'worldRotation' 16;
l'mouse1skip';

get'keys';[15 16 0];s;first;ifn'lkeyskip'; // rotate light if l held
get'input';[0 2 0];s;get'lrot';+;set'lrot' 2;
get'lrot';last;-300;/;[1 0 0];rot; // rot about x
get'lrot';first;-300;/;[0 1 0];rot;m; // rot about y
set'lightRotation' 16;
l'lkeyskip';




get'input';[4 5 0];s;first;ifn'mouse2skip'; // forward if mouse 2
[0 0 1 1];get'worldRotation';m;first;[0 3 0];s;timeDelta;4;/;3;rep;*;
get'origin';+;set'origin' 3;
l'mouse2skip';

get'keys';[26 27 0];s;first;ifn'wkeyskip';
[0 0 1 1];get'worldRotation';m;first;[0 3 0];s;timeDelta;4;/;3;rep;*;
get'origin';+;set'origin' 3;
l'wkeyskip';
get'keys';[22 23 0];s;first;ifn'skeyskip';
[0 0 -1 1];get'worldRotation';m;first;[0 3 0];s;timeDelta;4;/;3;rep;*;
get'origin';+;set'origin' 3;
l'skeyskip';
get'keys';[4 5 0];s;first;ifn'akeyskip';
[-1 0 0 1];get'worldRotation';m;first;[0 3 0];s;timeDelta;4;/;3;rep;*;
get'origin';+;set'origin' 3;
l'akeyskip';
get'keys';[7 8 0];s;first;ifn'dkeyskip';
[1 0 0 1];get'worldRotation';m;first;[0 3 0];s;timeDelta;4;/;3;rep;*;
get'origin';+;set'origin' 3;
l'dkeyskip';
get'keys';[44 45 0];s;get'keys';[225 226 0];s;+;first;ifn'spkeyskip';
[0 1 0 1];get'worldRotation';m;first;[0 3 0];s;timeDelta;4;/;3;rep;*;
get'origin';+;set'origin' 3;
l'spkeyskip';
get'keys';[224 225 0];s;get'keys';[6 7 0];s;+;first;ifn'ctkeyskip';
[0 -1 0 1];get'worldRotation';m;first;[0 3 0];s;timeDelta;4;/;3;rep;*;
get'origin';+;set'origin' 3;
l'ctkeyskip';


1;dup;1;dup; // duplicate terrain and heightmap
windowSize;0;dup;set'wdims' 2;
get'wdims';0;dup;first;1;dup;last;/;0.5;^;e;set'aspect' 1;pop; // set wdims to window dimensions and aspect.
[4];0;cat;


////////////////////////////////////////////////////////////////////////////////
// GLSL Functions
////////////////////////////////////////////////////////////////////////////////
c'
const float scale = 0.35\  // heightScale
const int maxIters = 128\
const int binSearchSteps = 6\
const float damping = 0.7\

const vec3 nrml = vec3(0.0, 1.0, 0.0)\
const vec3 uvec = vec3(1.0, 0.0, 0.0)\
const vec3 vvec = vec3(0.0, 0.0, 1.0)\
const mat3 tbn = mat3(uvec, vvec, nrml)\
const vec3 pntpln = vec3(0.0, -1.0, 0.0)\
const vec3 sun = vec3(0.5, -0.5, 0.5)\

float hash( vec2 p, float time ){
    float h = dot( p, vec2( 127.1, 311.7 ) ) / 1000.0 + fract( time * 1.2123438709 )\
    return fract( sin( h ) * 43758.5453123 )\
}

float sampleHeight( vec2 uv ){
  if( uv.x < 0.0 || uv.x > 0.99999 || uv.y < 0.0 || uv.y > 0.99999 )
    return 0.6\
  return af( uv * texsize ).x\
}

vec3 sampleNormal( vec2 uv ){
  vec2 coord = uv * texsize\
  float centers = af( coord )\
  float dHx = af( coord + vec2( 1, 0 ) ).x - centers\
  float dHy = af( coord + vec2( 0, 1 ) ).x - centers\
  return normalize( vec3(-dHx, 1.0 / texsize.x, -dHy) )\
}

vec3 binarySearchForSurface( vec3 startPos, vec3 endPos, int steps, float hscale ){
  vec3 mid = vec3(0.0)\
  for(int i=0\ i<steps\ i++){
    mid = 0.5 * (startPos + endPos)\
    float hm = sampleHeight( mid.xy ) * hscale\
    if(mid.z < hm){
      // mid is "under" the surface, so pull endPos up
      endPos = mid\
    } else {
      // mid is above the surface
      startPos = mid\
    }
  }
  return mid\
}

bool rayTrace( inout vec3 ray, vec3 origin ){
  vec3 viewDirWS = normalize(ray)\

  vec3 localOrigin = origin - pntpln\
  vec3 originTS = tbn * localOrigin\
  vec3 viewDirTS = normalize(tbn * viewDirWS)\

  float travel = 0.0\
  vec3 prevPos = originTS\
  float prevDelta = sampleHeight(prevPos.xy) * scale - prevPos.z\

  bool foundIntersection = false\
  vec3 finalPos = originTS\
  float finalHeight = 0.0\

  for(int i = 0\ i < maxIters\ i++){
    vec3 rayPos = originTS + travel * viewDirTS\
    vec2 uv = rayPos.xy\
    float h = sampleHeight(uv) * scale\

    float delta = h - rayPos.z\

    if( (prevDelta > 0.0 && delta < 0.0) || (prevDelta < 0.0 && delta > 0.0) ){
      finalPos = binarySearchForSurface(prevPos, rayPos, binSearchSteps, scale)\
      finalHeight = sampleHeight(finalPos.xy) * scale\
      foundIntersection = true\
      break\
    }

    if(abs(delta) < 0.001){
      finalPos = rayPos\
      finalHeight = h\
      foundIntersection = true\
      break\
    }

    float stepSize = -delta\// / -0.7\// / viewDirTS.z\
    stepSize *= damping\
    //    stepSize = clamp( stepSize, -0.04, 0.04 )\
    travel += stepSize\

    // update for next loop
    prevPos = rayPos\
    prevDelta = delta\
  }

  if(!foundIntersection)
    finalPos = originTS + travel * viewDirTS\
  
  
  ray.xy = finalPos.xy\
  ray.z = travel\
  return travel > 0.0 && finalPos.x > 0.01 && finalPos.x < 0.99 && finalPos.y > 0.01 && finalPos.y < 0.99\
}



////////////////////////////////////////////////////////////////////////////////
// The shader
////////////////////////////////////////////////////////////////////////////////

'
// Compute the initial ray in view space
vec3 ray = normalize(
    vec3(
      ( tf.xy / wdims * 2.0 - 1.0 ) * vec2(aspect, 1.0/aspect), 
      1.0
    )
)\

vec3 rotsun = ( lightRotation * vec4(vec3( 0.0, 1.0, 0.0 ), 1.0) ).xyz + sun\

// Rotate it by worldRotation
vec3 rcrayo = ( worldRotation * vec4(ray, 1.0) ).xyz\
vec3 rcray = rcrayo\
bool rcd = rayTrace( rcray, origin )\
vec3 intersect = rcray.z * rcrayo + origin\
vec3 sunrayo = normalize( intersect - rotsun )\
vec3 sunray = sunrayo\
bool sunrcd = rayTrace( sunray, rotsun )\
vec3 sintersect = sunray.z * sunrayo + rotsun\
bool underwater = intersect.y < -0.85\
float watert = -( dot( nrml, origin ) + dot( -nrml, vec3( 0, -0.85, 0 ) ) ) / dot( nrml, rcrayo )\
vec3 wintersect = rcrayo * watert + origin\

float csc = dot( -sunrayo, sampleNormal( rcray.xy ) )\


float sunDist = dot( rcrayo, rotsun - origin ) > 0.0 ? 2.0 - 5.0 * length( cross( rcrayo, origin - rotsun ) ) : 0.0\
float height = (sampleHeight( rcray.xy )-0.32) / 0.37\
vec3 color = vec3( b( ivec4( 0.0, (height) * ttexsize, 0.0, 0.0 ) ),
                   b( ivec4( 0.0, (height) * ttexsize, 1.0, 0.0 ) ),
		   b( ivec4( 0.0, (height) * ttexsize, 2.0, 0.0 ) ) )\
if( length( sintersect - intersect ) > 0.01 )
  color *= 0.2\

color = rcd ? color * clamp( csc, 0.1, 1.0 ) : clamp( vec3( 1.0 - sunDist, sunDist, sunDist ), 0.1, 0.9 )\

color = underwater ? mix( color, vec3( 0.3, 0.1, 0.1 ),
                          clamp( length( intersect - wintersect ) * 30.0, 0.0, 1.0 ) ) : color\


ret[0] = color.zyxx\
'
2 1 4;












1;if'end'; // Function defintions here, we skip them.

l'fractalNoise'; // Takes 2 arguments, initial grid size, and texture size.
set'fngradsize';
set'fntexsize';
[0.5];set'fnamp';
[1];set'fnseed';

get'fngradsize';get'fntexsize';get'fnamp';get'fnseed';perlin;

l'fnloop';
get'fngradsize';2;*;set'fngradsize';
get'fnamp';[0.5];*;set'fnamp';
get'fnseed';[1.2];+;set'fnseed';
get'fngradsize';get'fntexsize';get'fnamp';get'fnseed';perlin;
get'fntexsize';2;rep;c''ret[0]=a(t)+b(t)\' 2 1 0;
get'fntexsize';get'fngradsize';/;2;-;if'fnloop';
return;




l'perlin';   // Takes 4 arguments, gradient grid size, texture size, amplitude, and random seed.
set'time' 1;
set'amp' 1;
2;rep;set'texsize' 2;

2;rep;0;dup;set'gradsize' 2;[2];0;cat;
c'  // Push the gradients.
float hash( vec2 p, float time ){
    float h = dot( p, vec2( 127.1, 311.7 ) ) / 1000.0 + fract( time * 1.2123438709 )\
    return fract( sin( h ) * 43758.5453123 )\
}
'
ret[0]=t.z == 0 ? sin( hash( vec2( t.xy ), time ) * 2.0 * 3.1415928 ) :
                  cos( hash( vec2( t.xy ), time ) * 2.0 * 3.1415928 )\
' 0 1 0;

get'texsize';
;c'
float fade( float x ){
    return x*x*x*(x*(x*6.0 - 15.0)+10.0)\
}
float lerp( float a, float b, float t ){
    return a + t*(b - a)\
}
'
vec2 c1 = vec2( t.xy ) * gradsize / texsize\
vec2 fract = fract( c1 )\
ivec2 ic1 = ivec2( c1 )\
ivec2 ic2 = ic1 + ivec2( 1, 0 )\
ivec2 ic3 = ic1 + ivec2( 0, 1 )\
ivec2 ic4 = ic1 + ivec2( 1, 1 )\
c1 = vec2( a( ivec4( ic1, 0, 0 ) ), a( ivec4( ic1, 1, 0 ) ) )\
vec2 c2 = vec2( a( ivec4( ic2, 0, 0 ) ), a( ivec4( ic2, 1, 0 ) ) )\
vec2 c3 = vec2( a( ivec4( ic3, 0, 0 ) ), a( ivec4( ic3, 1, 0 ) ) )\
vec2 c4 = vec2( a( ivec4( ic4, 0, 0 ) ), a( ivec4( ic4, 1, 0 ) ) )\
float fc1 = dot( c1, fract - vec2( 0, 0 ) )\
float fc2 = dot( c2, fract - vec2( 1, 0 ) )\
float fc3 = dot( c3, fract - vec2( 0, 1 ) )\
float fc4 = dot( c4, fract - vec2( 1, 1 ) )\
float u  = fade( fract.x )\
float v  = fade( fract.y )\
float v1 = lerp( fc1, fc2, u )\
float v2 = lerp( fc3, fc4, u )\
float v3 = lerp( v1, v2, v )\
ret[0]=amp*(v3 * 0.5 + 0.5)\
' 1 1 0;
return;

l'end';